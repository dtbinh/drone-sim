package improbable.controller;

import "improbable/vector3.schema";

type TargetRequest {
	EntityId drone_id = 1;
}

enum TargetResponseCode {
  SUCCESS = 0;
  WRONG_CONTROLLER = 1;
  JOURNEY_COMPLETE = 2;
}

type TargetResponse {
  improbable.Vector3f new_target = 1;
  TargetResponseCode success = 2;
}

type DeliveryInfo {
  int32 slot = 5;
	int32 next_waypoint = 1;
	list<improbable.Vector3f> waypoints = 2;
  bool returning = 3;
  float latest_checkin_time = 4;
}

type DroneInfo {
  bool occupied = 1;
  EntityId delivery_id = 2;
  float battery_level = 3;
}

type CollisionRequest {
  EntityId drone_id = 1;
  EntityId collider_id = 2;
}

type CollisionResponse {}

type UnlinkRequest {
  EntityId drone_id = 1;
}

type UnlinkResponse {}

component Controller {
  id = 1200;

  uint32 max_drone_count = 2;

  map<EntityId, DeliveryInfo> deliveries_map = 3;
  list<DroneInfo> drone_slots = 7;

  bool initialised = 4;
  Vector3f top_left = 5;
  Vector3f bottom_right = 6;

  command TargetResponse request_new_target(TargetRequest);
  command CollisionResponse collision(CollisionRequest);
  command UnlinkResponse unlink_drone(UnlinkRequest);
}